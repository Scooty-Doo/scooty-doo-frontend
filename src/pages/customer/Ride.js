import React, { useState } from "react";
import L from "leaflet";
import { MapContainer, TileLayer, Polyline } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import styles from "../../styles/HistoryRideClient.module.css";

const ridehistory = [
  {
    bike_id: 77,
    user_id: "652134919185249773",
    start_time: "2024-02-17T05:35:18.719376",
    end_time: "2024-02-17T05:38:56.519376",
    start_position: "POINT (13.0678199999999993 55.5778589999999966)",
    end_position: "POINT (13.1000470000000000 55.5503399999999985)",
    path_taken:
      "LINESTRING (13.0678199999999993 55.5778600000000012, 13.0678699999999992 55.5778499999999980, 13.0712799999999998 55.5775599999999983, 13.0713000000000008 55.5776699999999977, 13.0714100000000002 55.5779899999999998, 13.0714500000000005 55.5780999999999992, 13.0716199999999994 55.5788000000000011, 13.0718800000000002 55.5787600000000026, 13.0730699999999995 55.5785800000000023, 13.0743600000000004 55.5783899999999988, 13.0752400000000009 55.5782200000000017, 13.0765899999999995 55.5779300000000021, 13.0770800000000005 55.5777900000000002, 13.0772600000000008 55.5777199999999993, 13.0775900000000007 55.5775999999999968, 13.0778300000000005 55.5775000000000006, 13.0780700000000003 55.5773900000000012, 13.0782900000000009 55.5772699999999986, 13.0788399999999996 55.5769700000000029, 13.0792800000000007 55.5767200000000017, 13.0795600000000007 55.5765699999999967, 13.0798299999999994 55.5764500000000012, 13.0801400000000001 55.5763099999999994, 13.0805399999999992 55.5761600000000016, 13.0809300000000004 55.5760399999999990, 13.0813299999999995 55.5759200000000035, 13.0817800000000002 55.5758200000000002, 13.0822599999999998 55.5757300000000001, 13.0834100000000007 55.5755600000000030, 13.0840499999999995 55.5754700000000028, 13.0846400000000003 55.5753800000000027, 13.0850500000000007 55.5753100000000018, 13.0853400000000004 55.5752499999999969, 13.0856100000000009 55.5751800000000031, 13.0858500000000006 55.5751100000000022, 13.0861800000000006 55.5749799999999965, 13.0865799999999997 55.5748099999999994, 13.0864799999999999 55.5747000000000000, 13.0863899999999997 55.5745999999999967, 13.0863399999999999 55.5745399999999989, 13.0863300000000002 55.5745000000000005, 13.0862999999999996 55.5743799999999979, 13.0861599999999996 55.5737400000000008, 13.0859600000000000 55.5729100000000003, 13.0857200000000002 55.5719399999999979, 13.0855300000000003 55.5711000000000013, 13.0852900000000005 55.5700999999999965, 13.0851100000000002 55.5693100000000015, 13.0849799999999998 55.5686000000000035, 13.0849600000000006 55.5683799999999977, 13.0849399999999996 55.5681900000000013, 13.0849499999999992 55.5679200000000009, 13.0849600000000006 55.5675999999999988, 13.0850000000000009 55.5672899999999998, 13.0850600000000004 55.5669200000000032, 13.0850700000000000 55.5668599999999984, 13.0851199999999999 55.5667100000000005, 13.0853300000000008 55.5662000000000020, 13.0854599999999994 55.5659700000000001, 13.0857899999999994 55.5654600000000016, 13.0861999999999998 55.5649500000000032, 13.0864999999999991 55.5646199999999979, 13.0868400000000005 55.5642899999999997, 13.0870599999999992 55.5641000000000034, 13.0872399999999995 55.5639699999999976, 13.0874400000000009 55.5638500000000022, 13.0876099999999997 55.5637600000000020, 13.0878399999999999 55.5636500000000026, 13.0880399999999995 55.5635600000000025, 13.0883000000000003 55.5634599999999992, 13.0886600000000008 55.5633399999999966, 13.0894200000000005 55.5631600000000034, 13.0897799999999993 55.5631100000000018, 13.0901899999999998 55.5630600000000001, 13.0909300000000002 55.5629700000000000, 13.0913699999999995 55.5629100000000022, 13.0914400000000004 55.5628900000000030, 13.0917399999999997 55.5628299999999982, 13.0921099999999999 55.5627500000000012, 13.0924499999999995 55.5626600000000010, 13.0930000000000000 55.5624699999999976, 13.0933799999999998 55.5623199999999997, 13.0937999999999999 55.5621500000000026, 13.0943799999999992 55.5619099999999975, 13.0952099999999998 55.5615900000000025, 13.0963100000000008 55.5611200000000025, 13.0982900000000004 55.5603199999999973, 13.1000999999999994 55.5595700000000008, 13.1017600000000005 55.5588899999999981, 13.1030300000000004 55.5583900000000028, 13.1035500000000003 55.5581699999999969, 13.1039700000000003 55.5580100000000030, 13.1047700000000003 55.5576999999999970, 13.1042500000000004 55.5572999999999979, 13.1032399999999996 55.5566200000000023, 13.1031200000000005 55.5565300000000022, 13.1022900000000000 55.5560100000000006, 13.1013800000000007 55.5554899999999989, 13.1006199999999993 55.5550599999999974, 13.1003299999999996 55.5549099999999996, 13.0998300000000008 55.5546700000000016, 13.0992899999999999 55.5544200000000004, 13.0981900000000007 55.5539100000000019, 13.0978200000000005 55.5537500000000009, 13.0977499999999996 55.5537199999999984, 13.0978700000000003 55.5536099999999990, 13.0982900000000004 55.5532899999999970, 13.0988399999999992 55.5527900000000017, 13.0991700000000009 55.5525200000000012, 13.0988900000000008 55.5523900000000026, 13.0985700000000005 55.5523099999999985, 13.0980000000000008 55.5522899999999993, 13.0976400000000002 55.5523299999999978, 13.0976199999999992 55.5522899999999993, 13.0974500000000003 55.5519299999999987, 13.0974000000000004 55.5518300000000025, 13.0981799999999993 55.5514200000000002, 13.0987500000000008 55.5510299999999972, 13.0991499999999998 55.5507399999999976, 13.0993499999999994 55.5506000000000029, 13.0997199999999996 55.5503700000000009, 13.0999700000000008 55.5502699999999976, 13.1000499999999995 55.5503399999999985)",
    total_fee: 10.89,
  },
];

// Hämta tid
const formatTime = (isoString) => {
  const date = new Date(isoString);
  return `${String(date.getHours()).padStart(2, "0")}.${String(date.getMinutes()).padStart(2, "0")}`;
};

// Hämta rutt 
const parsePath = (path) => 
  path.replace("LINESTRING (", "")
      .replace(")", "")
      .split(",")
      .map((pair) => pair.trim().split(" ").map(Number))
      .map(([lng, lat]) => [lat, lng]);

// Hitta centrum av rutten för att kunna visa upp rätt på kartan
const calculateCenter = (path) => {
  const coordinates = parsePath(path);
  const latitudes = coordinates.map(coord => coord[0]);
  const longitudes = coordinates.map(coord => coord[1]);
  return [
    latitudes.reduce((acc, lat) => acc + lat, 0) / latitudes.length,
    longitudes.reduce((acc, lng) => acc + lng, 0) / longitudes.length,
  ];
};

const Ride = () => (
  <div className={styles.history}>
    <h1>Din resa</h1>
    <table className={styles.historyTable}>
      <thead>
        <tr>
          <th>Datum</th>
          <th>Tid</th>
          <th>Pris</th>
          <th>Resa</th>
        </tr>
      </thead>
      <tbody>
        {ridehistory.map((ride, index) => {
          const pathCenter = calculateCenter(ride.path_taken);
          return (
            <tr key={index}>
              <td>{new Date(ride.start_time).toLocaleDateString()}</td>
              <td>{formatTime(ride.start_time)} - {formatTime(ride.end_time)}</td>
              <td>{ride.total_fee} kr</td>
              <td>
                <MapContainer center={pathCenter} zoom={13} style={{ height: "200px", width: "100%" }}>
                  <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
                  <Polyline positions={parsePath(ride.path_taken)} />
                </MapContainer>
              </td>
            </tr>
          );
        })}
      </tbody>
    </table>
  </div>
);

export default Ride;
